/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _AUTH_H_RPCGEN
#define _AUTH_H_RPCGEN

#include <rpc/rpc.h>
#include <time.h>
#include <string.h>

#ifdef __cplusplus
extern "C"
{
#endif

#define TOKEN_LEN 16
#define MAX_LEN_LINE 1000

	typedef char *string_l;

	struct list_node
	{
		struct list_node *next;
		struct list_node *prev;
		char *data;
	};
	typedef struct list_node list_node;

	struct linked_list
	{
		struct list_node *head;
		struct list_node *tail;
	};
	typedef struct linked_list linked_list;

	struct rpc_client_token
	{
		int avl_op;
		int is_signed;
		char permissions[MAX_LEN_LINE];
		char token_name[TOKEN_LEN];
	};
	typedef struct rpc_client_token rpc_client_token;

	struct rpc_client
	{
		char user_id[MAX_LEN_LINE];
		struct
		{
			u_int operation_type_len;
			string_l *operation_type_val;
		} operation_type;
		struct
		{
			u_int options_len;
			string_l *options_val;
		} options;
		struct
		{
			u_int operations_len;
			string_l *operations_val;
		} operations;
		struct rpc_client_token auth_token;
		struct rpc_client_token acc_token;
		struct rpc_client_token refresh_token;
	};
	typedef struct rpc_client rpc_client;

	typedef struct rpc_server
	{
		struct linked_list *users_id;
		struct linked_list *users_permissions;
		struct linked_list *resources;
		struct linked_list *acc_tokens;
	} rpc_server;

	/* Interfața de funcții necesară pentru manipularea datelor din fișiere */
	char *generate_access_token(char *);
	void read_file_list(FILE *, linked_list *, int);
	linked_list *read_file_char_array(FILE *, string_l **, u_int *);
	linked_list *init_list();
	list_node *add_list_node(linked_list *, char *);
	int remove_list_node(linked_list *, char *);
	void destroy_list(linked_list *);

	rpc_server *rpc_sv;
	int avl_op;
	list_node *iter_users_perm;

	/* Variabila globală care referă lista de jetoane de acces din server */
	list_node *iter_acc_tokens;

#define AUTH_PROG 123456789
#define REQ_AUTH_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define REQ_AUTHORIZATION 1
	extern char **req_authorization_1(rpc_client *, CLIENT *);
	extern char **req_authorization_1_svc(rpc_client *, struct svc_req *);
	extern int auth_prog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REQ_AUTHORIZATION 1
extern char **req_authorization_1();
extern char **req_authorization_1_svc();
extern int auth_prog_1_freeresult();
#endif /* K&R C */
#define REQ_ACC_VERSION 2

#if defined(__STDC__) || defined(__cplusplus)
#define REQ_ACC_TOKEN 1
	extern char **req_acc_token_2(rpc_client *, CLIENT *);
	extern char **req_acc_token_2_svc(rpc_client *, struct svc_req *);
	extern int auth_prog_2_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REQ_ACC_TOKEN 1
extern char **req_acc_token_2();
extern char **req_acc_token_2_svc();
extern int auth_prog_2_freeresult();
#endif /* K&R C */
#define VAL_DELG_VERSION 3

#if defined(__STDC__) || defined(__cplusplus)
#define VALIDATE_DELEGATE_ACTION 1
	extern char **validate_delegate_action_3(rpc_client *, CLIENT *);
	extern char **validate_delegate_action_3_svc(rpc_client *, struct svc_req *);
	extern int auth_prog_3_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define VALIDATE_DELEGATE_ACTION 1
extern char **validate_delegate_action_3();
extern char **validate_delegate_action_3_svc();
extern int auth_prog_3_freeresult();
#endif /* K&R C */
#define APPR_REQ_VERSION 4

#if defined(__STDC__) || defined(__cplusplus)
#define APPROVE_REQUEST_TOKEN 1
	extern char **approve_request_token_4(rpc_client *, CLIENT *);
	extern char **approve_request_token_4_svc(rpc_client *, struct svc_req *);
	extern int auth_prog_4_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define APPROVE_REQUEST_TOKEN 1
extern char **approve_request_token_4();
extern char **approve_request_token_4_svc();
extern int auth_prog_4_freeresult();
#endif /* K&R C */

	/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
	extern bool_t xdr_string_l(XDR *, string_l *);
	extern bool_t xdr_list_node(XDR *, list_node *);
	extern bool_t xdr_linked_list(XDR *, linked_list *);
	extern bool_t xdr_rpc_client_token(XDR *, rpc_client_token *);
	extern bool_t xdr_rpc_client(XDR *, rpc_client *);

#else /* K&R C */
extern bool_t xdr_string_l();
extern bool_t xdr_list_node();
extern bool_t xdr_linked_list();
extern bool_t xdr_rpc_client_token();
extern bool_t xdr_rpc_client();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_AUTH_H_RPCGEN */
